---
description: プロジェクトのドキュメント管理ルール。コードの説明、API仕様、変更履歴の記録方法を定義。Markdown形式で記述し、検索可能な構造化ドキュメントを作成。
globs: 
alwaysApply: false
---
# ルールの目的
このルールは、Cursorのドキュメンテーションを効果的に管理し、AIモデルに最新かつ正確なコンテキストを提供することを目的としています。

# 具体的な要件

## 1. ドキュメンテーションの基本構造
- 条件: 新しいドキュメントを作成する場合
- アクション: 以下の構造に従って記述
  ```markdown
  ---
  description: [説明]
  globs: [適用するファイルパターン]
  alwaysApply: [常に適用するかどうか]
  ---

  # ルールの内容
  [ルールの詳細]
  ```
- 期待される結果: 一貫性のある、理解しやすいドキュメント

## 2. ルールの種類
- Always: 常にモデルコンテキストに含まれる
- Auto Attached: 指定されたファイルパターンに一致するファイルが参照されたときに含まれる
- Agent Requested: AIが判断して含めるかどうかを決定（description必須）
- Manual: @ruleNameで明示的に指定された場合のみ含まれる

## 3. ドキュメンテーションの参照
- 条件: 他のファイルを参照する場合
- アクション: 
  - `@filename.ts`の形式で参照
  - 参照されたファイルはルールがトリガーされたときに追加のコンテキストとして含まれる
- 期待される結果: 関連ファイルの適切な参照

# ルールの検証
- [ ] メタデータが適切に記述されているか
- [ ] ルールの種類が明確に指定されているか
- [ ] ファイルパターンが適切に設定されているか
- [ ] 参照関係が明確に記述されているか

# ルール違反時の対応
1. メタデータが不完全な場合
   - descriptionを確認
   - globsを確認
   - alwaysApplyの設定を確認

2. 構造が不適切な場合
   - 推奨構造に従って再構成
   - セクションの順序を確認
   - 内容の整合性を確認

# 適用例

## 良い例
```markdown
---
description: RPC Service boilerplate
globs: "**/*.ts"
alwaysApply: false
---

- Use our internal RPC pattern when defining services
- Always use snake_case for service names.

@service-template.ts
```

## 悪い例
```markdown
# ドキュメンテーションルール

ドキュメントは以下のように書きます：
- タイトルを書く
- 内容を書く
```

# ベストプラクティス
- ルールは簡潔に保つ（500行以下を目標）
- 大きな概念は複数の、組み合わせ可能なルールに分割
- 具体的な例や参照ファイルを提供
- 曖昧なガイダンスを避ける
- チャットで繰り返し使用するプロンプトはルールとして再利用

# 依存ルール
- 00-knowledge-management.mdc: ナレッジ管理の基本ルール

# 関連ルール
- 02-implementation.mdc: 実装に関するルール
- 03-code-review.mdc: コードレビューのガイドライン








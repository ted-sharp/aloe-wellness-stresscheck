---
description: コードレビューの実施ガイドライン。レビューの準備、焦点、フィードバック方法を定義。品質確保と知識共有を目的とした効果的なレビュープロセスを確立。
globs: 
alwaysApply: false
---
# ルールの目的
このルールは、コードレビューの品質と効率を向上させ、チーム全体のコード品質を維持することを目的としています。

# 具体的な要件

## 1. レビューの準備
- 条件: コードレビューを開始する前
- アクション: 
  - 変更内容の明確な説明
  - 関連するテストの実行
  - コードの自己レビュー
- 期待される結果: レビューしやすい状態のコード

## 2. レビューの焦点
- 条件: コードレビューを実施する場合
- アクション: 
  - 機能の正確性
  - パフォーマンスへの影響
  - セキュリティの考慮
  - 保守性と可読性
- 期待される結果: 品質の高いコード

## 3. フィードバック
- 条件: レビューコメントを書く場合
- アクション: 
  - 具体的で建設的なコメント
  - 改善提案の明確な説明
  - ポジティブなフィードバック
- 期待される結果: 効果的なコミュニケーション

# ルールの検証
- [ ] 変更内容が明確に説明されているか
- [ ] テストが適切に実行されているか
- [ ] セキュリティが考慮されているか
- [ ] パフォーマンスへの影響が評価されているか
- [ ] コードの可読性が確保されているか

# ルール違反時の対応
1. レビュー準備が不十分な場合
   - 変更内容の説明を追加
   - テストの実行を確認
   - 自己レビューを実施

2. レビューが不十分な場合
   - レビューの焦点を再確認
   - 追加のレビュアーを依頼
   - レビュー基準の見直し

# 適用例

## 良い例
```markdown
# 変更内容
- ユーザー認証機能の追加
- パスワードハッシュ化の実装
- ログイン試行回数の制限

# テスト結果
- 単体テスト: 全テスト通過
- 統合テスト: 全テスト通過
- パフォーマンステスト: 影響なし

# セキュリティ考慮事項
- パスワードはbcryptでハッシュ化
- レート制限の実装
- セッション管理の実装
```

## 悪い例
```markdown
# 変更内容
- 認証機能の追加
- テストは通った
```

# ベストプラクティス
- 小さな変更単位でのレビュー
- タイムリーなレビュー実施
- 建設的なフィードバック
- 知識共有の機会として活用
- 自動化ツールの活用

# 依存ルール
- 01-documentation.mdc: ドキュメンテーションのルール
- 02-implementation.mdc: 実装のルール

# 関連ルール
- 04-style-guide.mdc: コーディングスタイルガイド


